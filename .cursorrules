# タスク分析と実行プロセス

<タスク分析>
1. 要件の理解
   - 主要なタスクを簡潔に要約する
   - ユーザーの意図と目的を明確化する
   - 期待される結果を具体化する

2. 技術的評価
   - 記載された技術スタックを確認する
   - 既存コードの動作状態を確認する
   - 利用可能なツールとリソースを特定する

3. 制約の確認
   - 技術的な制約を列挙する
   - プロジェクト固有の制約を確認する
   - 変更可能な範囲を特定する

4. リスク分析
   - 潜在的な課題をリストアップする
   - 変更による影響範囲を評価する
   - 失敗時のリスクを評価する

5. 実行計画の策定
   - 具体的な実行ステップを列挙する
   - 各ステップの成功基準を定義する
   - 確認ポイントを設定する

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

<実行プロセス>
1. 準備フェーズ
   - 不明点がある場合は、作業開始前に必ず確認を取る
   - 必要なツールとリソースが利用可能か確認する
   - 既存コードのバックアップを確認する

2. 実行フェーズ
   - 各ステップを順序通りに実行する
   - 各ステップの完了後に結果を確認する
   - 問題が発生した場合は即座に報告する

3. 確認フェーズ
   - 変更内容が要件を満たしているか確認する
   - 副作用が発生していないか確認する
   - 必要に応じてロールバックの準備を行う

4. 報告フェーズ
   - 実行結果を所定のフォーマットで報告する
   - 発生した問題と対応策を報告する
   - 改善提案があれば併せて報告する
</実行プロセス>

<結果報告>
以下のフォーマットで最終的な結果を報告してください：

```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップと結果
1. 準備フェーズ
   - 実施した確認事項
   - 確認結果
   - 特記事項

2. 実行フェーズ
   - 実行したステップ
   - 各ステップの結果
   - 発生した問題と対応

3. 確認フェーズ
   - 確認項目
   - 確認結果
   - 追加で必要な対応

## 最終成果物
- 変更内容の要約
- 影響範囲
- 動作確認結果

## 技術的考慮事項
- 使用した技術要素
- 技術的な制約と対応
- パフォーマンスへの影響

## 注意点・改善提案
- 気づいた点
- 改善提案
- 将来的な検討事項
```
</結果報告>

# 変更管理プロセス

## 1. 変更の必要性評価
- 変更は本当に必要か？
  - 既存の機能で代替できないか
  - より小さな変更で目的を達成できないか
  - 変更を行わないという選択肢はないか

- 変更の影響範囲は？
  - 直接的な影響範囲
  - 間接的な影響範囲
  - 他の機能への副作用

- リスク評価
  - 技術的なリスク
  - 運用上のリスク
  - ユーザーへの影響

## 2. 変更実施の原則
- 「動いているものは変更しない」を最優先する
- すべての変更は必要最小限に留める
- 変更は段階的に実施する
  1. 最小限の変更から開始
  2. 動作確認を行う
  3. 必要に応じて追加の変更を検討

- 各変更の前に以下を確認
  1. この変更は本当に必要か
  2. より安全な方法はないか
  3. 影響範囲は把握できているか

## 3. 変更の実施手順
1. 事前確認
   - 既存コードの動作確認
   - 影響範囲の特定
   - 必要なテストの特定

2. 変更の実施
   - 1つの変更につき1つのコミット
   - 変更内容を明確に記録
   - 変更理由を明記

3. 変更後の確認
   - 動作確認
   - テストの実行
   - コードレビュー基準との照合

4. 問題発生時の対応
   - 即座に報告
   - 変更の中断
   - ロールバックの検討

## 4. コードレビュー基準
- 変更は目的に対して必要最小限か
- テストは適切に追加・更新されているか
- ドキュメントは更新されているか
- 既存の機能を壊していないか
- パフォーマンスへの影響は許容範囲か

# 言語使用に関するルール

## 1. ゲーム内テキスト
- ゲーム内の文言は英語でRogueに忠実に記述する
- メッセージ、アイテム名、説明文などはオリジナルのRogueを参考にする

## 2. ソースコード
- すべてのコメントは英語で記述する
- 変数名、関数名、クラス名は英語で記述する
- コミットメッセージは簡潔な英語で記述する

## 3. ドキュメント
- docstringはGoogle形式で英語記述する
- READMEなどのドキュメントは特に指示がない限り英語で記述する
- APIドキュメントは英語で記述する

## 4. コミュニケーション
- AIアシスタントとの対話は日本語で行う
- エラーメッセージやデバッグ情報は英語で記録する

# 技術スタック
## コア技術
- Python ^3.12
- TCOD ^16.2.2
- esper ^2.5 (Entity Component System)
- pytest (Testing)
- black (Formatter)
- mypy (Type Checker)
- flake8 (Linter)
- poetry (Package Manager)

## プロジェクト構造

src/roguelike/
├── core/           # コアシステム
│   ├── engine.py      # ゲームエンジン
│   ├── event.py       # イベントシステム
│   └── constants.py   # 定数定義
│
├── game/           # ゲームロジック
│   ├── actions/       # ゲームアクション
│   │   ├── movement.py    # 移動関連
│   │   ├── combat.py      # 戦闘関連
│   │   └── item.py        # アイテム関連
│   ├── states/        # ゲーム状態
│   └── systems/       # ゲームシステム
│
├── world/          # ゲーム世界
│   ├── map/           # マップ生成
│   │   ├── generator/     # 生成アルゴリズム
│   │   ├── tiles.py       # タイル定義
│   │   └── room.py        # 部屋生成
│   ├── entity/        # エンティティ
│   │   ├── components/    # コンポーネント
│   │   ├── systems/       # ECSシステム
│   │   └── prefabs/       # エンティティ定義
│   └── spawner/       # スポナー
│       ├── monster.py     # モンスター生成
│       └── item.py        # アイテム生成
│
├── ui/             # ユーザーインターフェース
│   ├── screens/       # 画面
│   │   ├── game_screen.py    # メインゲーム画面
│   │   ├── menu_screen.py    # メニュー画面
│   │   └── inventory.py      # インベントリ画面
│   ├── handlers/      # 入力ハンドラ
│   │   ├── input_handler.py  # 入力処理
│   │   └── events.py         # UIイベント
│   └── elements/      # UI要素
│       ├── console.py        # コンソール関連
│       └── widgets.py        # ウィジェット
│
├── data/           # データ
│   ├── config/        # 設定ファイル
│   ├── assets/        # アセット
│   └── database/      # データベース
│
└── utils/          # ユーティリティ
    ├── logging.py     # ログ機能
    └── pathfinding.py # 経路探索


# コード変更に関する制約

## 1. 変更前の確認事項
- 変更は本当に必要か？
- より小さな変更で目的を達成できないか？
- 変更による副作用はないか？
- テストは十分か？
- ドキュメントの更新は必要か？

## 2. 変更時の原則
- 「動いていたものを壊さない」を最優先する
- すべての変更は必要最小限に留める
- 変更前に「この修正は本当に必要か？」を必ず確認する
- 変更による影響範囲を慎重に評価する

## 3. コードレビュー基準
- 変更は目的に対して必要最小限か
- テストは適切に追加・更新されているか
- ドキュメントは更新されているか
- 既存の機能を壊していないか
